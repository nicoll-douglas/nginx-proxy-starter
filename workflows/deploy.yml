# This workflow will automatically build and deploy your site's container to your server allowing for continuous development.
# You will need to setup SSH keys for your server and your project repo if you wish to use it.
# You should also include the .env.production file in your app's working directory on the server and configure as necessary.

# Necessary repository variables:
# SSH_HOST: The IP/hostname of your server
# SSH_PORT: The SSH port of your server
# SSH_USER: The SSH user of your server
# APP_DIR: The working directory of your site on the server
# DOCKERHUB_IMAGE: Your Docker Hub image (e.g your-username/your-site:latest)

# Necessary repository secrets:
# SSH_PRIVATE_KEY: Your server's private key
# DOCKERHUB_USERNAME: Your Docker Hub username
# DOCKERHUB_TOKEN: Your Docker Hub token

name: Deploy

on:
  push:
    branches: main
  workflow_dispatch:

jobs:
  # Stage 1: Build and push your site's Docker image to Docker Hub
  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Authenticate with Docker Hub
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build and push image
      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: . # Build context
          push: true # Push after build
          tags: ${{ vars.DOCKERHUB_IMAGE }}

  # Stage 2: Deploy to production server
  deploy:
    name: Deploy to Production
    needs: [build-and-push] # Requires successful build first
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Configure SSH connection
      - name: Setup SSH
        run: |
          echo "Setting up SSH connection to port ${{ vars.SSH_PORT }}"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          echo "Adding host key for ${{ vars.SSH_HOST }}:${{ vars.SSH_PORT }}"
          ssh-keyscan -p ${{ vars.SSH_PORT }} -H ${{ vars.SSH_HOST }} >> ~/.ssh/known_hosts

          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519

          echo "SSH setup complete"

      # Step 3: Copy the deployment Docker compose file and Makefile to the server
      - name: Upload Auxiliary Files to Server
        run: |
          echo "Uploading files to server on port ${{ vars.SSH_PORT }}"
          scp -P ${{ vars.SSH_PORT }} -i ~/.ssh/id_ed25519 docker-compose.deploy.yml Makefile ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:${{ env.APP_DIR }}
          echo "File upload complete"

      # Step 4: Execute deployment commands on server
      - name: Run Deployment
        run: |
          echo "Starting deployment process on port ${{ vars.SSH_PORT }}"
          ssh -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} << 'EOF'
            set -euo pipefail # Exit on error + if any command fails
            cd "${{ vars.APP_DIR }}"
            
            echo "Current directory: $(pwd)"
            echo "Files in directory:"
            ls -la
            
            # 1. Login to Docker Hub
            echo "Logging into Docker Hub"
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login \
              -u "${{ secrets.DOCKERHUB_USERNAME }}" \
              --password-stdin
            
            # 2. Stop and remove old container
            echo "Stopping and removing old container"
            make deploy-down
            
            # 3. Pull latest image
            echo "Pulling latest image"
            make deploy-pull

            # 4. Start new container
            echo "Starting new container"
            make deploy-up
            
            echo "Successfully deployed: ${{ vars.DOCKERHUB_IMAGE }}"
          EOF
